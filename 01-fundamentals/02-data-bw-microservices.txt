one of the biggest challange is tha datamanagement between different services

with microservices we store and access data in sort of strange way. 
1- how we sore data
2- how we access data
in microsrvice approach.

a- we create saperate database for each of different microservice.
b- we are not going to acces data from one service to other microservice's database, 
why this is?

why database per service?
1- we want each service to run indeendently of other services
2- database schema/structure might change unexpectedly
3- some services might function more efficiently with different types of DB's(sql VS noSql)

what? if we have one database for every services?
if some thing bad happens with database all services will be affected badly
scalling this database will be really challanging.

====================================Communication Strategies =====================
there are two strategies to communicaate between the services
1- sync 
2- async
these words dont mean what they mean in javascript

=>>> sync communication style
    services communicate with each other using diresct request
    this is not necessarily that this should b an http request. it is some kind of direct request to fetch some information

=>>> async communication style
    Services communicated with each other using events
    its a little bit confusing
 ============================= Notes on sync  Communication =======================
 => Pros
1- conceptually easy to understand
2- Service D dont need a database
=> Cons
3- it introduces a ependencies between the services
4- if any interservice request fails, the overall request fails
5- the entire request is only as fast as the slowest request
6- Can easily introduce webs of requests


============= Communication between differenc services using async communication style==========
there are two different ways for async communication. 
first method is little bit tidious. but we have to know about it. 
so the general idea between async communication is that we are going to introduce to the entire application that is accessible to all of the services is reffers to an Event Bus
this purpose of this event bus is to handle a little notifications in the form of events being emitted from all different services. 

these events are like little objects or like little notes, that describes that something has happend or something needs to happen inside our application.

each service is connected with this event bus. each service can either emits or receives the events. its means that all of the services are weired up with a single point of failures and that is the actual event bus. so this event bus should not be crashed every time.

now we'll see how all this works
points to be notted
1- service A is for signup of users
2- service B is for available products
3- service C is for listing of orders
4- service D is for getting all the orders related to a single User.

here the Service D is creating a bridge between all the services A, B and C

service D will emit an event to check if the user with the given id is present or not. this event will float throug the event bus. event bus will send a copy of this event to the service A. Service A  will have a code that will be executed every time when this particular event will happen. this particulaer piece of code will execute and find if the user is presen or not. after confirmation service A will also emit an event with some data about user or in the for of error if user is not present. this result will automatically sent to the service D. Service D will also have some piece of code that will be executed when this particular event will happen.

we'll reppeat these all steps to get all the orders from service C related to the given user and related products from the service B agains each order. this is the one possible way to communicate in async style between different styles.

============================= Notes on async  Communication method 1 ======================
all the downside with sync communication probably have additional downside for async communication with this approach

1- conceptually not super easy to understand
2- Service D dont need a database

3- it introduces a dependencies between the services
4- if any event fails, the overall request fails or probably timed out.
5- the entire request is only as fast as the slowest event
6- Can easily introduce webs of different events emitted


============================= Notes on async  Communication method 2 ======================
just like the databse-per-service pattern, async communication is going to seem bizarre and enefficient

to solve the above problem we have to standarized some thing like
we have to decide the exact behaviour of service D and the data that it needs.
refine the exact goal of the service is the main thing

Service D => Given the ID of the User, show the title and image for every product they have ever 
            ordered
thats the exact precise goal of service D.

Solution:
we'll setup a separate database for service D with two collections. 
1- products
    id, title, image
2- Users
    id, products Ids=[], an array of products id's  that he has ordered

////////////////////////////////////////////
// let for Products                       //
// id      title       image              //
// 5       "pants"     "pants.jpeg"       //
// 20      "shoes"     " shoes.png"       //
//                                        //
// for Users                              //
// id          Products Ids               //
// 1               [5,20]                 //
////////////////////////////////////////////


if we have database such like the above we can easily implement the service D.
now the point is that how can we create this database? this is the main challange. because the service D never ever know about when a user is signUp, when a product is created and when an order is placed.
how can we make the service A, B and C to somehow tells to the Service D that when a user signup, when a product is created, when an order is placed.

if we tries to create some sync communication between Service A,D or B,D or C,D, then service A,B,C will be crashed id service D is not Up and Running. because it becomes the dependency for Service A,B,C.

now we start to think to do it in async method that how can we put data in DB of service D?
the solution is that when a request is made to the Service A for User Signup, or to service B for creating product, or to service D for placing an order, an event will occur simmultaneously that what is happened to these services right now. 


let at start a product is created. an event will happen. this event will go through the event bus and received by the Service D. service D has a code to respond agains this event. this event will also had some king of data related to product e,g id, title, image. this data will stored in the database of service D usder Products collection.

when a user signUp and event will emited again and going through the event bus and received by Service D. this event may have the data related to user e,g, id of user. service D has a code to respond agains this event. this code will put the user's Id in the Service D databse uder the Users collection with products Ids equal to an empty brackets.

 when a user will placed an order, than again an event will be emitted wit the data related to product e,g, product Id. this event will pass through the event bus and will also be received by the Service D. service D has a code that will respond agains this event and put the ordered product's id inside the empty brackets.

 in this way a new database is populated very easily for service D.

============================= Pros and Cons of async  Communication method 2 ======================
=> Pros
1- service D has 0 dependencies on other services
2- service D will be extremely Fast.

=> Cons
3- Data duplication. Paying for extra Storage + extra DB (its not a big deal. todays the db are very less costly. to save the records of about 100 millions of products we have to pay only 14$ per year. its not a big deal.)(storage in the modern world is relatively free)

4- Harder to understand. (its also not a big deal. practice makes a map perfect)
